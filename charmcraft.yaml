# This file configures Charmcraft.
# See https://juju.is/docs/sdk/charmcraft-config for guidance.

# (Required)
name: mountain-car-charm
# (Recommended)
title: Mountain Car Charm

# (Required)
summary: |
  This implementation solves the Mountain Car control problem using the Episodic Semi-gradient Sarsa algorithm for estimating an action-value function. For a complete explanation of the problem, refer to the full article [here](https://drive.google.com/file/d/11xdhJ3PMVRHd0J13kKXUp5fLwiSwRlCh/view?usp=sharing).


# (Required)
description: |
  The Mountain Car task presents an underpowered car that must leverage momentum to reach a goal at the top of a steep incline. Due to gravitational constraints, the car cannot reach the goal by direct acceleration but must first backtrack and build up sufficient momentum. This classic example of continuous control highlights the complexity of tasks where states may need to worsen temporarily to achieve an ultimate goal.

  The car has three available actions: full throttle forward (+1), full throttle reverse (-1), and no throttle (0). Physics for position (xt) and velocity (ẋt) are simplified, with constraints on the range of position (1.2 ≥ xt+1 ≥ -0.5) and velocity (0.07 ≥ ẋt+1 ≥ -0.07). If the car reaches the left boundary, the velocity is reset to zero; reaching the right boundary ends the episode. Each episode starts from a random position within the range [-0.6, -0.4) and zero initial velocity.


# (Required)
type: charm

# (Required for 'charm' type)
bases:
  - build-on:
    - name: ubuntu
      channel: "22.04"
    run-on:
    - name: ubuntu
      channel: "22.04"


# Installed libpq5 because psycopg3 requires it to build from source
# using psycopg3-binary also requires this dependencies(!)
# Check: https://juju.is/docs/sdk/change-step-behavior-in-a-charm
# parts:
#   charm:
#     override-build: |
#       echo "This overrides the charm pack"
#       apt install -y libpq5
#       craftctl default

# This relates the charm to the database
# when executed: $juju integrate mountain-car-charm mysql
# will trigger the self.on.database_relation_changed (Some other hooks will be called too)
requires:
  database:
    interface: mysql

# (Optional) Configuration options for the charm
# This config section defines charm config options, and populates the Configure
# tab on Charmhub.
# More information on this section at https://juju.is/docs/sdk/charmcraft-yaml#heading--config
# General configuration documentation: https://juju.is/docs/sdk/config
config:
  options:
    # An example config option to customise the log level of the workload
    log-level:
      description: |
        Configures the log level of gunicorn.

        Acceptable values are: "info", "debug", "warning", "error" and "critical"
      default: "info"
      type: string

# Charm custom actions
actions:
  simulation:
    description: |
      Train models based on the combination of parameters passed in. Simulate the models 
      and persist the trajectory sizes obtained for each combination in the following MySQL model structured across two primary tables: 
      `training_definition` and `training_result`.

      1. `training_definition` Table: This table logs the parameters defining each training session, 
         such as the unit identifier (`unit_id`), feature type (`feature_type`), and various training 
         parameters (`alpha`, `gamma`, `epsilon`, `polynomial_dimension`, `protos_per_dimension`, 
         `training_sessions`, and `simulations`). Each record in this table represents a unique 
         training configuration, and each entry is assigned a unique identifier (`training_definition_id`).

      2. `training_result` Table: This table captures the actual mean trajectory sizes (`trajectory_size`) 
         obtained from the training session. Each result is linked to a specific `training_definition_id` 
         from the `training_definition` table, establishing a relationship between the training parameters 
         and the results. The list of mean trajectory sizes, represented by `trajectory_sizes_mean`, is saved 
         here, allowing each trajectory size to correspond to a particular training session.

    params:
      feature-type:
        type: string
        description: Feature selection method (`POLYNOMIAL` for polynomial features or `NRB` for Radial Basis Function).
        enum:
          - POLYNOMIAL
          - NRB
      alpha-list:
        type: array
        items:
          type: string
        description: Learning rates for training sessions. Values should be between 0.01 and 0.5.
      gamma-list:
        type: array
        items:
          type: string
        description: Discount factors for the reward. Values should be between 0.8 and 1.0.
      epsilon-list:
        type: array
        items:
          type: string
        description: Exploration parameters for epsilon-greedy strategy. Values should be between 0.25 and 0.75.
      polynomial-dimension-list:
        type: array
        items:
          type: string
        description: A list of polynomial dimensions if `feature-type` is `POLYNOMIAL`. Values can be between 2 and 10.
      protos-per-dimension-list:
        type: array
        items:
          type: string
        description: Number of proto points per dimension if feature-type is `NRB`. Values can be between 8 and 52.
      training-sessions:
        type: integer
        description: Number of training sessions used to train the models.
      simulations:
        type: integer
        description: Number of simulations to be executed for each training session.
    required:
    - feature-type
    additionalProperties: false
  getdbsecret:
    description: Retrieves the database configuration secret. It is a dictionary with fields `dbname`, `dbhost`, `dbuser`, `dbpassword`, and `dbport`. If the secret is unavailable, the action fails with the message `"Config file not found"`.
